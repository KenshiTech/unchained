// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ap *AssetPrice) Signers(ctx context.Context) (result []*Signer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedSigners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.SignersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QuerySigners().All(ctx)
	}
	return result, err
}

func (cr *CorrectnessReport) Signers(ctx context.Context) (result []*Signer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cr.NamedSigners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cr.Edges.SignersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cr.QuerySigners().All(ctx)
	}
	return result, err
}

func (el *EventLog) Signers(ctx context.Context) (result []*Signer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = el.NamedSigners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = el.Edges.SignersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = el.QuerySigners().All(ctx)
	}
	return result, err
}

func (s *Signer) AssetPrice(ctx context.Context) (result []*AssetPrice, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedAssetPrice(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.AssetPriceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryAssetPrice().All(ctx)
	}
	return result, err
}

func (s *Signer) EventLogs(ctx context.Context) (result []*EventLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedEventLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.EventLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryEventLogs().All(ctx)
	}
	return result, err
}

func (s *Signer) CorrectnessReport(ctx context.Context) (result []*CorrectnessReport, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedCorrectnessReport(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.CorrectnessReportOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryCorrectnessReport().All(ctx)
	}
	return result, err
}
