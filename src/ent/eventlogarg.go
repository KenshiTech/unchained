// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KenshiTech/unchained/ent/eventlog"
	"github.com/KenshiTech/unchained/ent/eventlogarg"
)

// EventLogArg is the model entity for the EventLogArg schema.
type EventLogArg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventLogArgQuery when eager-loading is set.
	Edges          EventLogArgEdges `json:"edges"`
	event_log_args *int
	selectValues   sql.SelectValues
}

// EventLogArgEdges holds the relations/edges for other nodes in the graph.
type EventLogArgEdges struct {
	// EventLog holds the value of the eventLog edge.
	EventLog *EventLog `json:"eventLog,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventLogOrErr returns the EventLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogArgEdges) EventLogOrErr() (*EventLog, error) {
	if e.loadedTypes[0] {
		if e.EventLog == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: eventlog.Label}
		}
		return e.EventLog, nil
	}
	return nil, &NotLoadedError{edge: "eventLog"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventLogArg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventlogarg.FieldID:
			values[i] = new(sql.NullInt64)
		case eventlogarg.FieldName, eventlogarg.FieldType, eventlogarg.FieldValue:
			values[i] = new(sql.NullString)
		case eventlogarg.ForeignKeys[0]: // event_log_args
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventLogArg fields.
func (ela *EventLogArg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventlogarg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ela.ID = int(value.Int64)
		case eventlogarg.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ela.Name = value.String
			}
		case eventlogarg.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ela.Type = value.String
			}
		case eventlogarg.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ela.Value = value.String
			}
		case eventlogarg.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_log_args", value)
			} else if value.Valid {
				ela.event_log_args = new(int)
				*ela.event_log_args = int(value.Int64)
			}
		default:
			ela.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the EventLogArg.
// This includes values selected through modifiers, order, etc.
func (ela *EventLogArg) GetValue(name string) (ent.Value, error) {
	return ela.selectValues.Get(name)
}

// QueryEventLog queries the "eventLog" edge of the EventLogArg entity.
func (ela *EventLogArg) QueryEventLog() *EventLogQuery {
	return NewEventLogArgClient(ela.config).QueryEventLog(ela)
}

// Update returns a builder for updating this EventLogArg.
// Note that you need to call EventLogArg.Unwrap() before calling this method if this EventLogArg
// was returned from a transaction, and the transaction was committed or rolled back.
func (ela *EventLogArg) Update() *EventLogArgUpdateOne {
	return NewEventLogArgClient(ela.config).UpdateOne(ela)
}

// Unwrap unwraps the EventLogArg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ela *EventLogArg) Unwrap() *EventLogArg {
	_tx, ok := ela.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventLogArg is not a transactional entity")
	}
	ela.config.driver = _tx.drv
	return ela
}

// String implements the fmt.Stringer.
func (ela *EventLogArg) String() string {
	var builder strings.Builder
	builder.WriteString("EventLogArg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ela.ID))
	builder.WriteString("name=")
	builder.WriteString(ela.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ela.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ela.Value)
	builder.WriteByte(')')
	return builder.String()
}

// EventLogArgs is a parsable slice of EventLogArg.
type EventLogArgs []*EventLogArg
