// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/eventlog"
	"github.com/KenshiTech/unchained/ent/eventlogarg"
	"github.com/KenshiTech/unchained/ent/predicate"
)

// EventLogArgQuery is the builder for querying EventLogArg entities.
type EventLogArgQuery struct {
	config
	ctx          *QueryContext
	order        []eventlogarg.OrderOption
	inters       []Interceptor
	predicates   []predicate.EventLogArg
	withEventLog *EventLogQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventLogArgQuery builder.
func (elaq *EventLogArgQuery) Where(ps ...predicate.EventLogArg) *EventLogArgQuery {
	elaq.predicates = append(elaq.predicates, ps...)
	return elaq
}

// Limit the number of records to be returned by this query.
func (elaq *EventLogArgQuery) Limit(limit int) *EventLogArgQuery {
	elaq.ctx.Limit = &limit
	return elaq
}

// Offset to start from.
func (elaq *EventLogArgQuery) Offset(offset int) *EventLogArgQuery {
	elaq.ctx.Offset = &offset
	return elaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (elaq *EventLogArgQuery) Unique(unique bool) *EventLogArgQuery {
	elaq.ctx.Unique = &unique
	return elaq
}

// Order specifies how the records should be ordered.
func (elaq *EventLogArgQuery) Order(o ...eventlogarg.OrderOption) *EventLogArgQuery {
	elaq.order = append(elaq.order, o...)
	return elaq
}

// QueryEventLog chains the current query on the "eventLog" edge.
func (elaq *EventLogArgQuery) QueryEventLog() *EventLogQuery {
	query := (&EventLogClient{config: elaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := elaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlogarg.Table, eventlogarg.FieldID, selector),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlogarg.EventLogTable, eventlogarg.EventLogColumn),
		)
		fromU = sqlgraph.SetNeighbors(elaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventLogArg entity from the query.
// Returns a *NotFoundError when no EventLogArg was found.
func (elaq *EventLogArgQuery) First(ctx context.Context) (*EventLogArg, error) {
	nodes, err := elaq.Limit(1).All(setContextOp(ctx, elaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventlogarg.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (elaq *EventLogArgQuery) FirstX(ctx context.Context) *EventLogArg {
	node, err := elaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventLogArg ID from the query.
// Returns a *NotFoundError when no EventLogArg ID was found.
func (elaq *EventLogArgQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elaq.Limit(1).IDs(setContextOp(ctx, elaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventlogarg.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (elaq *EventLogArgQuery) FirstIDX(ctx context.Context) int {
	id, err := elaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventLogArg entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventLogArg entity is found.
// Returns a *NotFoundError when no EventLogArg entities are found.
func (elaq *EventLogArgQuery) Only(ctx context.Context) (*EventLogArg, error) {
	nodes, err := elaq.Limit(2).All(setContextOp(ctx, elaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventlogarg.Label}
	default:
		return nil, &NotSingularError{eventlogarg.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (elaq *EventLogArgQuery) OnlyX(ctx context.Context) *EventLogArg {
	node, err := elaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventLogArg ID in the query.
// Returns a *NotSingularError when more than one EventLogArg ID is found.
// Returns a *NotFoundError when no entities are found.
func (elaq *EventLogArgQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elaq.Limit(2).IDs(setContextOp(ctx, elaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventlogarg.Label}
	default:
		err = &NotSingularError{eventlogarg.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (elaq *EventLogArgQuery) OnlyIDX(ctx context.Context) int {
	id, err := elaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventLogArgs.
func (elaq *EventLogArgQuery) All(ctx context.Context) ([]*EventLogArg, error) {
	ctx = setContextOp(ctx, elaq.ctx, "All")
	if err := elaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventLogArg, *EventLogArgQuery]()
	return withInterceptors[[]*EventLogArg](ctx, elaq, qr, elaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (elaq *EventLogArgQuery) AllX(ctx context.Context) []*EventLogArg {
	nodes, err := elaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventLogArg IDs.
func (elaq *EventLogArgQuery) IDs(ctx context.Context) (ids []int, err error) {
	if elaq.ctx.Unique == nil && elaq.path != nil {
		elaq.Unique(true)
	}
	ctx = setContextOp(ctx, elaq.ctx, "IDs")
	if err = elaq.Select(eventlogarg.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (elaq *EventLogArgQuery) IDsX(ctx context.Context) []int {
	ids, err := elaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (elaq *EventLogArgQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, elaq.ctx, "Count")
	if err := elaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, elaq, querierCount[*EventLogArgQuery](), elaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (elaq *EventLogArgQuery) CountX(ctx context.Context) int {
	count, err := elaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (elaq *EventLogArgQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, elaq.ctx, "Exist")
	switch _, err := elaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (elaq *EventLogArgQuery) ExistX(ctx context.Context) bool {
	exist, err := elaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventLogArgQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (elaq *EventLogArgQuery) Clone() *EventLogArgQuery {
	if elaq == nil {
		return nil
	}
	return &EventLogArgQuery{
		config:       elaq.config,
		ctx:          elaq.ctx.Clone(),
		order:        append([]eventlogarg.OrderOption{}, elaq.order...),
		inters:       append([]Interceptor{}, elaq.inters...),
		predicates:   append([]predicate.EventLogArg{}, elaq.predicates...),
		withEventLog: elaq.withEventLog.Clone(),
		// clone intermediate query.
		sql:  elaq.sql.Clone(),
		path: elaq.path,
	}
}

// WithEventLog tells the query-builder to eager-load the nodes that are connected to
// the "eventLog" edge. The optional arguments are used to configure the query builder of the edge.
func (elaq *EventLogArgQuery) WithEventLog(opts ...func(*EventLogQuery)) *EventLogArgQuery {
	query := (&EventLogClient{config: elaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	elaq.withEventLog = query
	return elaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventLogArg.Query().
//		GroupBy(eventlogarg.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (elaq *EventLogArgQuery) GroupBy(field string, fields ...string) *EventLogArgGroupBy {
	elaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventLogArgGroupBy{build: elaq}
	grbuild.flds = &elaq.ctx.Fields
	grbuild.label = eventlogarg.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EventLogArg.Query().
//		Select(eventlogarg.FieldName).
//		Scan(ctx, &v)
func (elaq *EventLogArgQuery) Select(fields ...string) *EventLogArgSelect {
	elaq.ctx.Fields = append(elaq.ctx.Fields, fields...)
	sbuild := &EventLogArgSelect{EventLogArgQuery: elaq}
	sbuild.label = eventlogarg.Label
	sbuild.flds, sbuild.scan = &elaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventLogArgSelect configured with the given aggregations.
func (elaq *EventLogArgQuery) Aggregate(fns ...AggregateFunc) *EventLogArgSelect {
	return elaq.Select().Aggregate(fns...)
}

func (elaq *EventLogArgQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range elaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, elaq); err != nil {
				return err
			}
		}
	}
	for _, f := range elaq.ctx.Fields {
		if !eventlogarg.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if elaq.path != nil {
		prev, err := elaq.path(ctx)
		if err != nil {
			return err
		}
		elaq.sql = prev
	}
	return nil
}

func (elaq *EventLogArgQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventLogArg, error) {
	var (
		nodes       = []*EventLogArg{}
		withFKs     = elaq.withFKs
		_spec       = elaq.querySpec()
		loadedTypes = [1]bool{
			elaq.withEventLog != nil,
		}
	)
	if elaq.withEventLog != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eventlogarg.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventLogArg).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventLogArg{config: elaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, elaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := elaq.withEventLog; query != nil {
		if err := elaq.loadEventLog(ctx, query, nodes, nil,
			func(n *EventLogArg, e *EventLog) { n.Edges.EventLog = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (elaq *EventLogArgQuery) loadEventLog(ctx context.Context, query *EventLogQuery, nodes []*EventLogArg, init func(*EventLogArg), assign func(*EventLogArg, *EventLog)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventLogArg)
	for i := range nodes {
		if nodes[i].event_log_args == nil {
			continue
		}
		fk := *nodes[i].event_log_args
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(eventlog.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_log_args" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (elaq *EventLogArgQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := elaq.querySpec()
	_spec.Node.Columns = elaq.ctx.Fields
	if len(elaq.ctx.Fields) > 0 {
		_spec.Unique = elaq.ctx.Unique != nil && *elaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, elaq.driver, _spec)
}

func (elaq *EventLogArgQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventlogarg.Table, eventlogarg.Columns, sqlgraph.NewFieldSpec(eventlogarg.FieldID, field.TypeInt))
	_spec.From = elaq.sql
	if unique := elaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if elaq.path != nil {
		_spec.Unique = true
	}
	if fields := elaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlogarg.FieldID)
		for i := range fields {
			if fields[i] != eventlogarg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := elaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := elaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := elaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := elaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (elaq *EventLogArgQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(elaq.driver.Dialect())
	t1 := builder.Table(eventlogarg.Table)
	columns := elaq.ctx.Fields
	if len(columns) == 0 {
		columns = eventlogarg.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if elaq.sql != nil {
		selector = elaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if elaq.ctx.Unique != nil && *elaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range elaq.predicates {
		p(selector)
	}
	for _, p := range elaq.order {
		p(selector)
	}
	if offset := elaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := elaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventLogArgGroupBy is the group-by builder for EventLogArg entities.
type EventLogArgGroupBy struct {
	selector
	build *EventLogArgQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (elagb *EventLogArgGroupBy) Aggregate(fns ...AggregateFunc) *EventLogArgGroupBy {
	elagb.fns = append(elagb.fns, fns...)
	return elagb
}

// Scan applies the selector query and scans the result into the given value.
func (elagb *EventLogArgGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, elagb.build.ctx, "GroupBy")
	if err := elagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventLogArgQuery, *EventLogArgGroupBy](ctx, elagb.build, elagb, elagb.build.inters, v)
}

func (elagb *EventLogArgGroupBy) sqlScan(ctx context.Context, root *EventLogArgQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(elagb.fns))
	for _, fn := range elagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*elagb.flds)+len(elagb.fns))
		for _, f := range *elagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*elagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := elagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventLogArgSelect is the builder for selecting fields of EventLogArg entities.
type EventLogArgSelect struct {
	*EventLogArgQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (elas *EventLogArgSelect) Aggregate(fns ...AggregateFunc) *EventLogArgSelect {
	elas.fns = append(elas.fns, fns...)
	return elas
}

// Scan applies the selector query and scans the result into the given value.
func (elas *EventLogArgSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, elas.ctx, "Select")
	if err := elas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventLogArgQuery, *EventLogArgSelect](ctx, elas.EventLogArgQuery, elas, elas.inters, v)
}

func (elas *EventLogArgSelect) sqlScan(ctx context.Context, root *EventLogArgQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(elas.fns))
	for _, fn := range elas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*elas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := elas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
