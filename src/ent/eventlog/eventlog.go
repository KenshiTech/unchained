// Code generated by ent, DO NOT EDIT.

package eventlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventlog type in the database.
	Label = "event_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlock holds the string denoting the block field in the database.
	FieldBlock = "block"
	// FieldSignersCount holds the string denoting the signerscount field in the database.
	FieldSignersCount = "signers_count"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldChain holds the string denoting the chain field in the database.
	FieldChain = "chain"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldTransaction holds the string denoting the transaction field in the database.
	FieldTransaction = "transaction"
	// EdgeSigners holds the string denoting the signers edge name in mutations.
	EdgeSigners = "signers"
	// EdgeArgs holds the string denoting the args edge name in mutations.
	EdgeArgs = "args"
	// Table holds the table name of the eventlog in the database.
	Table = "event_logs"
	// SignersTable is the table that holds the signers relation/edge. The primary key declared below.
	SignersTable = "event_log_signers"
	// SignersInverseTable is the table name for the Signer entity.
	// It exists in this package in order to avoid circular dependency with the "signer" package.
	SignersInverseTable = "signers"
	// ArgsTable is the table that holds the args relation/edge.
	ArgsTable = "event_log_args"
	// ArgsInverseTable is the table name for the EventLogArg entity.
	// It exists in this package in order to avoid circular dependency with the "eventlogarg" package.
	ArgsInverseTable = "event_log_args"
	// ArgsColumn is the table column denoting the args relation/edge.
	ArgsColumn = "event_log_args"
)

// Columns holds all SQL columns for eventlog fields.
var Columns = []string{
	FieldID,
	FieldBlock,
	FieldSignersCount,
	FieldSignature,
	FieldAddress,
	FieldChain,
	FieldIndex,
	FieldEvent,
	FieldTransaction,
}

var (
	// SignersPrimaryKey and SignersColumn2 are the table columns denoting the
	// primary key for the signers relation (M2M).
	SignersPrimaryKey = []string{"event_log_id", "signer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SignatureValidator is a validator for the "signature" field. It is called by the builders before save.
	SignatureValidator func([]byte) error
)

// OrderOption defines the ordering options for the EventLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBlock orders the results by the block field.
func ByBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlock, opts...).ToFunc()
}

// BySignersCountField orders the results by the signersCount field.
func BySignersCountField(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignersCount, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByChain orders the results by the chain field.
func ByChain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChain, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByTransaction orders the results by the transaction field.
func ByTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransaction, opts...).ToFunc()
}

// BySignersCount orders the results by signers count.
func BySignersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSignersStep(), opts...)
	}
}

// BySigners orders the results by signers terms.
func BySigners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArgsCount orders the results by args count.
func ByArgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArgsStep(), opts...)
	}
}

// ByArgs orders the results by args terms.
func ByArgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSignersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SignersTable, SignersPrimaryKey...),
	)
}
func newArgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArgsTable, ArgsColumn),
	)
}
