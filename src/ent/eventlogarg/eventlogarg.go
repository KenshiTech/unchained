// Code generated by ent, DO NOT EDIT.

package eventlogarg

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventlogarg type in the database.
	Label = "event_log_arg"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeEventLog holds the string denoting the eventlog edge name in mutations.
	EdgeEventLog = "eventLog"
	// Table holds the table name of the eventlogarg in the database.
	Table = "event_log_args"
	// EventLogTable is the table that holds the eventLog relation/edge.
	EventLogTable = "event_log_args"
	// EventLogInverseTable is the table name for the EventLog entity.
	// It exists in this package in order to avoid circular dependency with the "eventlog" package.
	EventLogInverseTable = "event_logs"
	// EventLogColumn is the table column denoting the eventLog relation/edge.
	EventLogColumn = "event_log_args"
)

// Columns holds all SQL columns for eventlogarg fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_log_args"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_log_args",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EventLogArg queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByEventLogField orders the results by eventLog field.
func ByEventLogField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventLogStep(), sql.OrderByField(field, opts...))
	}
}
func newEventLogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventLogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventLogTable, EventLogColumn),
	)
}
