// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/eventlogarg"
	"github.com/KenshiTech/unchained/ent/predicate"
)

// EventLogArgDelete is the builder for deleting a EventLogArg entity.
type EventLogArgDelete struct {
	config
	hooks    []Hook
	mutation *EventLogArgMutation
}

// Where appends a list predicates to the EventLogArgDelete builder.
func (elad *EventLogArgDelete) Where(ps ...predicate.EventLogArg) *EventLogArgDelete {
	elad.mutation.Where(ps...)
	return elad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (elad *EventLogArgDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, elad.sqlExec, elad.mutation, elad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (elad *EventLogArgDelete) ExecX(ctx context.Context) int {
	n, err := elad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (elad *EventLogArgDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventlogarg.Table, sqlgraph.NewFieldSpec(eventlogarg.FieldID, field.TypeInt))
	if ps := elad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, elad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	elad.mutation.done = true
	return affected, err
}

// EventLogArgDeleteOne is the builder for deleting a single EventLogArg entity.
type EventLogArgDeleteOne struct {
	elad *EventLogArgDelete
}

// Where appends a list predicates to the EventLogArgDelete builder.
func (elado *EventLogArgDeleteOne) Where(ps ...predicate.EventLogArg) *EventLogArgDeleteOne {
	elado.elad.mutation.Where(ps...)
	return elado
}

// Exec executes the deletion query.
func (elado *EventLogArgDeleteOne) Exec(ctx context.Context) error {
	n, err := elado.elad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventlogarg.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (elado *EventLogArgDeleteOne) ExecX(ctx context.Context) {
	if err := elado.Exec(ctx); err != nil {
		panic(err)
	}
}
