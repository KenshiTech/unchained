// Code generated by ent, DO NOT EDIT.

package assetprice

import (
	"fmt"
	"math/big"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KenshiTech/unchained/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLTE(FieldID, id))
}

// Block applies equality check predicate on the "block" field. It's identical to BlockEQ.
func Block(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldBlock, v))
}

// SignersCount applies equality check predicate on the "signersCount" field. It's identical to SignersCountEQ.
func SignersCount(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldSignersCount, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldEQ(FieldPrice, vc), err)
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldSignature, v))
}

// BlockEQ applies the EQ predicate on the "block" field.
func BlockEQ(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldBlock, v))
}

// BlockNEQ applies the NEQ predicate on the "block" field.
func BlockNEQ(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNEQ(FieldBlock, v))
}

// BlockIn applies the In predicate on the "block" field.
func BlockIn(vs ...uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldIn(FieldBlock, vs...))
}

// BlockNotIn applies the NotIn predicate on the "block" field.
func BlockNotIn(vs ...uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNotIn(FieldBlock, vs...))
}

// BlockGT applies the GT predicate on the "block" field.
func BlockGT(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGT(FieldBlock, v))
}

// BlockGTE applies the GTE predicate on the "block" field.
func BlockGTE(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGTE(FieldBlock, v))
}

// BlockLT applies the LT predicate on the "block" field.
func BlockLT(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLT(FieldBlock, v))
}

// BlockLTE applies the LTE predicate on the "block" field.
func BlockLTE(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLTE(FieldBlock, v))
}

// SignersCountEQ applies the EQ predicate on the "signersCount" field.
func SignersCountEQ(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldSignersCount, v))
}

// SignersCountNEQ applies the NEQ predicate on the "signersCount" field.
func SignersCountNEQ(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNEQ(FieldSignersCount, v))
}

// SignersCountIn applies the In predicate on the "signersCount" field.
func SignersCountIn(vs ...uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldIn(FieldSignersCount, vs...))
}

// SignersCountNotIn applies the NotIn predicate on the "signersCount" field.
func SignersCountNotIn(vs ...uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNotIn(FieldSignersCount, vs...))
}

// SignersCountGT applies the GT predicate on the "signersCount" field.
func SignersCountGT(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGT(FieldSignersCount, v))
}

// SignersCountGTE applies the GTE predicate on the "signersCount" field.
func SignersCountGTE(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGTE(FieldSignersCount, v))
}

// SignersCountLT applies the LT predicate on the "signersCount" field.
func SignersCountLT(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLT(FieldSignersCount, v))
}

// SignersCountLTE applies the LTE predicate on the "signersCount" field.
func SignersCountLTE(v uint64) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLTE(FieldSignersCount, v))
}

// SignersCountIsNil applies the IsNil predicate on the "signersCount" field.
func SignersCountIsNil() predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldIsNull(FieldSignersCount))
}

// SignersCountNotNil applies the NotNil predicate on the "signersCount" field.
func SignersCountNotNil() predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNotNull(FieldSignersCount))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldEQ(FieldPrice, vc), err)
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldNEQ(FieldPrice, vc), err)
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...*big.Int) predicate.AssetPrice {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.Price.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.AssetPriceOrErr(sql.FieldIn(FieldPrice, v...), err)
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...*big.Int) predicate.AssetPrice {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.Price.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.AssetPriceOrErr(sql.FieldNotIn(FieldPrice, v...), err)
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldGT(FieldPrice, vc), err)
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldGTE(FieldPrice, vc), err)
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldLT(FieldPrice, vc), err)
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	return predicate.AssetPriceOrErr(sql.FieldLTE(FieldPrice, vc), err)
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("price value is not a string: %T", vc)
	}
	return predicate.AssetPriceOrErr(sql.FieldContains(FieldPrice, vcs), err)
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("price value is not a string: %T", vc)
	}
	return predicate.AssetPriceOrErr(sql.FieldHasPrefix(FieldPrice, vcs), err)
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("price value is not a string: %T", vc)
	}
	return predicate.AssetPriceOrErr(sql.FieldHasSuffix(FieldPrice, vcs), err)
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("price value is not a string: %T", vc)
	}
	return predicate.AssetPriceOrErr(sql.FieldEqualFold(FieldPrice, vcs), err)
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v *big.Int) predicate.AssetPrice {
	vc, err := ValueScanner.Price.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("price value is not a string: %T", vc)
	}
	return predicate.AssetPriceOrErr(sql.FieldContainsFold(FieldPrice, vcs), err)
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...[]byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...[]byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v []byte) predicate.AssetPrice {
	return predicate.AssetPrice(sql.FieldLTE(FieldSignature, v))
}

// HasDataSet applies the HasEdge predicate on the "dataSet" edge.
func HasDataSet() predicate.AssetPrice {
	return predicate.AssetPrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DataSetTable, DataSetPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDataSetWith applies the HasEdge predicate on the "dataSet" edge with a given conditions (other predicates).
func HasDataSetWith(preds ...predicate.DataSet) predicate.AssetPrice {
	return predicate.AssetPrice(func(s *sql.Selector) {
		step := newDataSetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSigners applies the HasEdge predicate on the "signers" edge.
func HasSigners() predicate.AssetPrice {
	return predicate.AssetPrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SignersTable, SignersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSignersWith applies the HasEdge predicate on the "signers" edge with a given conditions (other predicates).
func HasSignersWith(preds ...predicate.Signer) predicate.AssetPrice {
	return predicate.AssetPrice(func(s *sql.Selector) {
		step := newSignersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetPrice) predicate.AssetPrice {
	return predicate.AssetPrice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetPrice) predicate.AssetPrice {
	return predicate.AssetPrice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetPrice) predicate.AssetPrice {
	return predicate.AssetPrice(sql.NotPredicates(p))
}
