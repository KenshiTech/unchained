// Code generated by ent, DO NOT EDIT.

package assetprice

import (
	"math/big"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the assetprice type in the database.
	Label = "asset_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlock holds the string denoting the block field in the database.
	FieldBlock = "block"
	// FieldSignersCount holds the string denoting the signerscount field in the database.
	FieldSignersCount = "signers_count"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// EdgeDataSet holds the string denoting the dataset edge name in mutations.
	EdgeDataSet = "DataSet"
	// EdgeSigners holds the string denoting the signers edge name in mutations.
	EdgeSigners = "Signers"
	// Table holds the table name of the assetprice in the database.
	Table = "asset_prices"
	// DataSetTable is the table that holds the DataSet relation/edge. The primary key declared below.
	DataSetTable = "asset_price_DataSet"
	// DataSetInverseTable is the table name for the DataSet entity.
	// It exists in this package in order to avoid circular dependency with the "dataset" package.
	DataSetInverseTable = "data_sets"
	// SignersTable is the table that holds the Signers relation/edge. The primary key declared below.
	SignersTable = "asset_price_Signers"
	// SignersInverseTable is the table name for the Signer entity.
	// It exists in this package in order to avoid circular dependency with the "signer" package.
	SignersInverseTable = "signers"
)

// Columns holds all SQL columns for assetprice fields.
var Columns = []string{
	FieldID,
	FieldBlock,
	FieldSignersCount,
	FieldPrice,
	FieldSignature,
}

var (
	// DataSetPrimaryKey and DataSetColumn2 are the table columns denoting the
	// primary key for the DataSet relation (M2M).
	DataSetPrimaryKey = []string{"asset_price_id", "data_set_id"}
	// SignersPrimaryKey and SignersColumn2 are the table columns denoting the
	// primary key for the Signers relation (M2M).
	SignersPrimaryKey = []string{"asset_price_id", "signer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ValueScanner of all AssetPrice fields.
	ValueScanner struct {
		Price field.TypeValueScanner[*big.Int]
	}
)

// OrderOption defines the ordering options for the AssetPrice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBlock orders the results by the block field.
func ByBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlock, opts...).ToFunc()
}

// BySignersCountField orders the results by the signersCount field.
func BySignersCountField(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignersCount, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDataSetCount orders the results by DataSet count.
func ByDataSetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDataSetStep(), opts...)
	}
}

// ByDataSet orders the results by DataSet terms.
func ByDataSet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDataSetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySignersCount orders the results by Signers count.
func BySignersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSignersStep(), opts...)
	}
}

// BySigners orders the results by Signers terms.
func BySigners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDataSetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DataSetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DataSetTable, DataSetPrimaryKey...),
	)
}
func newSignersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SignersTable, SignersPrimaryKey...),
	)
}
