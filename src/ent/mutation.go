// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math/big"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KenshiTech/unchained/ent/assetprice"
	"github.com/KenshiTech/unchained/ent/dataset"
	"github.com/KenshiTech/unchained/ent/predicate"
	"github.com/KenshiTech/unchained/ent/signer"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAssetPrice = "AssetPrice"
	TypeDataSet    = "DataSet"
	TypeSigner     = "Signer"
)

// AssetPriceMutation represents an operation that mutates the AssetPrice nodes in the graph.
type AssetPriceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	block           *uint64
	addblock        *int64
	signersCount    *uint64
	addsignersCount *int64
	price           **big.Int
	signature       *[]byte
	clearedFields   map[string]struct{}
	_DataSet        map[int]struct{}
	removed_DataSet map[int]struct{}
	cleared_DataSet bool
	_Signers        map[int]struct{}
	removed_Signers map[int]struct{}
	cleared_Signers bool
	done            bool
	oldValue        func(context.Context) (*AssetPrice, error)
	predicates      []predicate.AssetPrice
}

var _ ent.Mutation = (*AssetPriceMutation)(nil)

// assetpriceOption allows management of the mutation configuration using functional options.
type assetpriceOption func(*AssetPriceMutation)

// newAssetPriceMutation creates new mutation for the AssetPrice entity.
func newAssetPriceMutation(c config, op Op, opts ...assetpriceOption) *AssetPriceMutation {
	m := &AssetPriceMutation{
		config:        c,
		op:            op,
		typ:           TypeAssetPrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAssetPriceID sets the ID field of the mutation.
func withAssetPriceID(id int) assetpriceOption {
	return func(m *AssetPriceMutation) {
		var (
			err   error
			once  sync.Once
			value *AssetPrice
		)
		m.oldValue = func(ctx context.Context) (*AssetPrice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AssetPrice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAssetPrice sets the old AssetPrice of the mutation.
func withAssetPrice(node *AssetPrice) assetpriceOption {
	return func(m *AssetPriceMutation) {
		m.oldValue = func(context.Context) (*AssetPrice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AssetPriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AssetPriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AssetPriceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AssetPriceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AssetPrice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBlock sets the "block" field.
func (m *AssetPriceMutation) SetBlock(u uint64) {
	m.block = &u
	m.addblock = nil
}

// Block returns the value of the "block" field in the mutation.
func (m *AssetPriceMutation) Block() (r uint64, exists bool) {
	v := m.block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "block" field's value of the AssetPrice entity.
// If the AssetPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetPriceMutation) OldBlock(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// AddBlock adds u to the "block" field.
func (m *AssetPriceMutation) AddBlock(u int64) {
	if m.addblock != nil {
		*m.addblock += u
	} else {
		m.addblock = &u
	}
}

// AddedBlock returns the value that was added to the "block" field in this mutation.
func (m *AssetPriceMutation) AddedBlock() (r int64, exists bool) {
	v := m.addblock
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlock resets all changes to the "block" field.
func (m *AssetPriceMutation) ResetBlock() {
	m.block = nil
	m.addblock = nil
}

// SetSignersCount sets the "signersCount" field.
func (m *AssetPriceMutation) SetSignersCount(u uint64) {
	m.signersCount = &u
	m.addsignersCount = nil
}

// SignersCount returns the value of the "signersCount" field in the mutation.
func (m *AssetPriceMutation) SignersCount() (r uint64, exists bool) {
	v := m.signersCount
	if v == nil {
		return
	}
	return *v, true
}

// OldSignersCount returns the old "signersCount" field's value of the AssetPrice entity.
// If the AssetPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetPriceMutation) OldSignersCount(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignersCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignersCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignersCount: %w", err)
	}
	return oldValue.SignersCount, nil
}

// AddSignersCount adds u to the "signersCount" field.
func (m *AssetPriceMutation) AddSignersCount(u int64) {
	if m.addsignersCount != nil {
		*m.addsignersCount += u
	} else {
		m.addsignersCount = &u
	}
}

// AddedSignersCount returns the value that was added to the "signersCount" field in this mutation.
func (m *AssetPriceMutation) AddedSignersCount() (r int64, exists bool) {
	v := m.addsignersCount
	if v == nil {
		return
	}
	return *v, true
}

// ClearSignersCount clears the value of the "signersCount" field.
func (m *AssetPriceMutation) ClearSignersCount() {
	m.signersCount = nil
	m.addsignersCount = nil
	m.clearedFields[assetprice.FieldSignersCount] = struct{}{}
}

// SignersCountCleared returns if the "signersCount" field was cleared in this mutation.
func (m *AssetPriceMutation) SignersCountCleared() bool {
	_, ok := m.clearedFields[assetprice.FieldSignersCount]
	return ok
}

// ResetSignersCount resets all changes to the "signersCount" field.
func (m *AssetPriceMutation) ResetSignersCount() {
	m.signersCount = nil
	m.addsignersCount = nil
	delete(m.clearedFields, assetprice.FieldSignersCount)
}

// SetPrice sets the "price" field.
func (m *AssetPriceMutation) SetPrice(b *big.Int) {
	m.price = &b
}

// Price returns the value of the "price" field in the mutation.
func (m *AssetPriceMutation) Price() (r *big.Int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the AssetPrice entity.
// If the AssetPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetPriceMutation) OldPrice(ctx context.Context) (v *big.Int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// ResetPrice resets all changes to the "price" field.
func (m *AssetPriceMutation) ResetPrice() {
	m.price = nil
}

// SetSignature sets the "signature" field.
func (m *AssetPriceMutation) SetSignature(b []byte) {
	m.signature = &b
}

// Signature returns the value of the "signature" field in the mutation.
func (m *AssetPriceMutation) Signature() (r []byte, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the AssetPrice entity.
// If the AssetPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetPriceMutation) OldSignature(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ResetSignature resets all changes to the "signature" field.
func (m *AssetPriceMutation) ResetSignature() {
	m.signature = nil
}

// AddDataSetIDs adds the "DataSet" edge to the DataSet entity by ids.
func (m *AssetPriceMutation) AddDataSetIDs(ids ...int) {
	if m._DataSet == nil {
		m._DataSet = make(map[int]struct{})
	}
	for i := range ids {
		m._DataSet[ids[i]] = struct{}{}
	}
}

// ClearDataSet clears the "DataSet" edge to the DataSet entity.
func (m *AssetPriceMutation) ClearDataSet() {
	m.cleared_DataSet = true
}

// DataSetCleared reports if the "DataSet" edge to the DataSet entity was cleared.
func (m *AssetPriceMutation) DataSetCleared() bool {
	return m.cleared_DataSet
}

// RemoveDataSetIDs removes the "DataSet" edge to the DataSet entity by IDs.
func (m *AssetPriceMutation) RemoveDataSetIDs(ids ...int) {
	if m.removed_DataSet == nil {
		m.removed_DataSet = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._DataSet, ids[i])
		m.removed_DataSet[ids[i]] = struct{}{}
	}
}

// RemovedDataSet returns the removed IDs of the "DataSet" edge to the DataSet entity.
func (m *AssetPriceMutation) RemovedDataSetIDs() (ids []int) {
	for id := range m.removed_DataSet {
		ids = append(ids, id)
	}
	return
}

// DataSetIDs returns the "DataSet" edge IDs in the mutation.
func (m *AssetPriceMutation) DataSetIDs() (ids []int) {
	for id := range m._DataSet {
		ids = append(ids, id)
	}
	return
}

// ResetDataSet resets all changes to the "DataSet" edge.
func (m *AssetPriceMutation) ResetDataSet() {
	m._DataSet = nil
	m.cleared_DataSet = false
	m.removed_DataSet = nil
}

// AddSignerIDs adds the "Signers" edge to the Signer entity by ids.
func (m *AssetPriceMutation) AddSignerIDs(ids ...int) {
	if m._Signers == nil {
		m._Signers = make(map[int]struct{})
	}
	for i := range ids {
		m._Signers[ids[i]] = struct{}{}
	}
}

// ClearSigners clears the "Signers" edge to the Signer entity.
func (m *AssetPriceMutation) ClearSigners() {
	m.cleared_Signers = true
}

// SignersCleared reports if the "Signers" edge to the Signer entity was cleared.
func (m *AssetPriceMutation) SignersCleared() bool {
	return m.cleared_Signers
}

// RemoveSignerIDs removes the "Signers" edge to the Signer entity by IDs.
func (m *AssetPriceMutation) RemoveSignerIDs(ids ...int) {
	if m.removed_Signers == nil {
		m.removed_Signers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Signers, ids[i])
		m.removed_Signers[ids[i]] = struct{}{}
	}
}

// RemovedSigners returns the removed IDs of the "Signers" edge to the Signer entity.
func (m *AssetPriceMutation) RemovedSignersIDs() (ids []int) {
	for id := range m.removed_Signers {
		ids = append(ids, id)
	}
	return
}

// SignersIDs returns the "Signers" edge IDs in the mutation.
func (m *AssetPriceMutation) SignersIDs() (ids []int) {
	for id := range m._Signers {
		ids = append(ids, id)
	}
	return
}

// ResetSigners resets all changes to the "Signers" edge.
func (m *AssetPriceMutation) ResetSigners() {
	m._Signers = nil
	m.cleared_Signers = false
	m.removed_Signers = nil
}

// Where appends a list predicates to the AssetPriceMutation builder.
func (m *AssetPriceMutation) Where(ps ...predicate.AssetPrice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AssetPriceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AssetPriceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AssetPrice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AssetPriceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AssetPriceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AssetPrice).
func (m *AssetPriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AssetPriceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.block != nil {
		fields = append(fields, assetprice.FieldBlock)
	}
	if m.signersCount != nil {
		fields = append(fields, assetprice.FieldSignersCount)
	}
	if m.price != nil {
		fields = append(fields, assetprice.FieldPrice)
	}
	if m.signature != nil {
		fields = append(fields, assetprice.FieldSignature)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AssetPriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case assetprice.FieldBlock:
		return m.Block()
	case assetprice.FieldSignersCount:
		return m.SignersCount()
	case assetprice.FieldPrice:
		return m.Price()
	case assetprice.FieldSignature:
		return m.Signature()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AssetPriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case assetprice.FieldBlock:
		return m.OldBlock(ctx)
	case assetprice.FieldSignersCount:
		return m.OldSignersCount(ctx)
	case assetprice.FieldPrice:
		return m.OldPrice(ctx)
	case assetprice.FieldSignature:
		return m.OldSignature(ctx)
	}
	return nil, fmt.Errorf("unknown AssetPrice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetPriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case assetprice.FieldBlock:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case assetprice.FieldSignersCount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignersCount(v)
		return nil
	case assetprice.FieldPrice:
		v, ok := value.(*big.Int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case assetprice.FieldSignature:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	}
	return fmt.Errorf("unknown AssetPrice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AssetPriceMutation) AddedFields() []string {
	var fields []string
	if m.addblock != nil {
		fields = append(fields, assetprice.FieldBlock)
	}
	if m.addsignersCount != nil {
		fields = append(fields, assetprice.FieldSignersCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AssetPriceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case assetprice.FieldBlock:
		return m.AddedBlock()
	case assetprice.FieldSignersCount:
		return m.AddedSignersCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetPriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case assetprice.FieldBlock:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlock(v)
		return nil
	case assetprice.FieldSignersCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSignersCount(v)
		return nil
	}
	return fmt.Errorf("unknown AssetPrice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AssetPriceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(assetprice.FieldSignersCount) {
		fields = append(fields, assetprice.FieldSignersCount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AssetPriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AssetPriceMutation) ClearField(name string) error {
	switch name {
	case assetprice.FieldSignersCount:
		m.ClearSignersCount()
		return nil
	}
	return fmt.Errorf("unknown AssetPrice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AssetPriceMutation) ResetField(name string) error {
	switch name {
	case assetprice.FieldBlock:
		m.ResetBlock()
		return nil
	case assetprice.FieldSignersCount:
		m.ResetSignersCount()
		return nil
	case assetprice.FieldPrice:
		m.ResetPrice()
		return nil
	case assetprice.FieldSignature:
		m.ResetSignature()
		return nil
	}
	return fmt.Errorf("unknown AssetPrice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AssetPriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._DataSet != nil {
		edges = append(edges, assetprice.EdgeDataSet)
	}
	if m._Signers != nil {
		edges = append(edges, assetprice.EdgeSigners)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AssetPriceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case assetprice.EdgeDataSet:
		ids := make([]ent.Value, 0, len(m._DataSet))
		for id := range m._DataSet {
			ids = append(ids, id)
		}
		return ids
	case assetprice.EdgeSigners:
		ids := make([]ent.Value, 0, len(m._Signers))
		for id := range m._Signers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AssetPriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_DataSet != nil {
		edges = append(edges, assetprice.EdgeDataSet)
	}
	if m.removed_Signers != nil {
		edges = append(edges, assetprice.EdgeSigners)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AssetPriceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case assetprice.EdgeDataSet:
		ids := make([]ent.Value, 0, len(m.removed_DataSet))
		for id := range m.removed_DataSet {
			ids = append(ids, id)
		}
		return ids
	case assetprice.EdgeSigners:
		ids := make([]ent.Value, 0, len(m.removed_Signers))
		for id := range m.removed_Signers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AssetPriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_DataSet {
		edges = append(edges, assetprice.EdgeDataSet)
	}
	if m.cleared_Signers {
		edges = append(edges, assetprice.EdgeSigners)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AssetPriceMutation) EdgeCleared(name string) bool {
	switch name {
	case assetprice.EdgeDataSet:
		return m.cleared_DataSet
	case assetprice.EdgeSigners:
		return m.cleared_Signers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AssetPriceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AssetPrice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AssetPriceMutation) ResetEdge(name string) error {
	switch name {
	case assetprice.EdgeDataSet:
		m.ResetDataSet()
		return nil
	case assetprice.EdgeSigners:
		m.ResetSigners()
		return nil
	}
	return fmt.Errorf("unknown AssetPrice edge %s", name)
}

// DataSetMutation represents an operation that mutates the DataSet nodes in the graph.
type DataSetMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	_AssetPrice        map[int]struct{}
	removed_AssetPrice map[int]struct{}
	cleared_AssetPrice bool
	done               bool
	oldValue           func(context.Context) (*DataSet, error)
	predicates         []predicate.DataSet
}

var _ ent.Mutation = (*DataSetMutation)(nil)

// datasetOption allows management of the mutation configuration using functional options.
type datasetOption func(*DataSetMutation)

// newDataSetMutation creates new mutation for the DataSet entity.
func newDataSetMutation(c config, op Op, opts ...datasetOption) *DataSetMutation {
	m := &DataSetMutation{
		config:        c,
		op:            op,
		typ:           TypeDataSet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDataSetID sets the ID field of the mutation.
func withDataSetID(id int) datasetOption {
	return func(m *DataSetMutation) {
		var (
			err   error
			once  sync.Once
			value *DataSet
		)
		m.oldValue = func(ctx context.Context) (*DataSet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DataSet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataSet sets the old DataSet of the mutation.
func withDataSet(node *DataSet) datasetOption {
	return func(m *DataSetMutation) {
		m.oldValue = func(context.Context) (*DataSet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DataSetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DataSetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DataSetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DataSetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DataSet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DataSetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DataSetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DataSet entity.
// If the DataSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataSetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DataSetMutation) ResetName() {
	m.name = nil
}

// AddAssetPriceIDs adds the "AssetPrice" edge to the AssetPrice entity by ids.
func (m *DataSetMutation) AddAssetPriceIDs(ids ...int) {
	if m._AssetPrice == nil {
		m._AssetPrice = make(map[int]struct{})
	}
	for i := range ids {
		m._AssetPrice[ids[i]] = struct{}{}
	}
}

// ClearAssetPrice clears the "AssetPrice" edge to the AssetPrice entity.
func (m *DataSetMutation) ClearAssetPrice() {
	m.cleared_AssetPrice = true
}

// AssetPriceCleared reports if the "AssetPrice" edge to the AssetPrice entity was cleared.
func (m *DataSetMutation) AssetPriceCleared() bool {
	return m.cleared_AssetPrice
}

// RemoveAssetPriceIDs removes the "AssetPrice" edge to the AssetPrice entity by IDs.
func (m *DataSetMutation) RemoveAssetPriceIDs(ids ...int) {
	if m.removed_AssetPrice == nil {
		m.removed_AssetPrice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._AssetPrice, ids[i])
		m.removed_AssetPrice[ids[i]] = struct{}{}
	}
}

// RemovedAssetPrice returns the removed IDs of the "AssetPrice" edge to the AssetPrice entity.
func (m *DataSetMutation) RemovedAssetPriceIDs() (ids []int) {
	for id := range m.removed_AssetPrice {
		ids = append(ids, id)
	}
	return
}

// AssetPriceIDs returns the "AssetPrice" edge IDs in the mutation.
func (m *DataSetMutation) AssetPriceIDs() (ids []int) {
	for id := range m._AssetPrice {
		ids = append(ids, id)
	}
	return
}

// ResetAssetPrice resets all changes to the "AssetPrice" edge.
func (m *DataSetMutation) ResetAssetPrice() {
	m._AssetPrice = nil
	m.cleared_AssetPrice = false
	m.removed_AssetPrice = nil
}

// Where appends a list predicates to the DataSetMutation builder.
func (m *DataSetMutation) Where(ps ...predicate.DataSet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DataSetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DataSetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DataSet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DataSetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DataSetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DataSet).
func (m *DataSetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DataSetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, dataset.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DataSetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DataSetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dataset.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown DataSet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataSetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown DataSet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DataSetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DataSetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataSetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DataSet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DataSetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DataSetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DataSetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DataSet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DataSetMutation) ResetField(name string) error {
	switch name {
	case dataset.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown DataSet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DataSetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._AssetPrice != nil {
		edges = append(edges, dataset.EdgeAssetPrice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DataSetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeAssetPrice:
		ids := make([]ent.Value, 0, len(m._AssetPrice))
		for id := range m._AssetPrice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DataSetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_AssetPrice != nil {
		edges = append(edges, dataset.EdgeAssetPrice)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DataSetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeAssetPrice:
		ids := make([]ent.Value, 0, len(m.removed_AssetPrice))
		for id := range m.removed_AssetPrice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DataSetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_AssetPrice {
		edges = append(edges, dataset.EdgeAssetPrice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DataSetMutation) EdgeCleared(name string) bool {
	switch name {
	case dataset.EdgeAssetPrice:
		return m.cleared_AssetPrice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DataSetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DataSet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DataSetMutation) ResetEdge(name string) error {
	switch name {
	case dataset.EdgeAssetPrice:
		m.ResetAssetPrice()
		return nil
	}
	return fmt.Errorf("unknown DataSet edge %s", name)
}

// SignerMutation represents an operation that mutates the Signer nodes in the graph.
type SignerMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	key                *[]byte
	points             *int64
	addpoints          *int64
	clearedFields      map[string]struct{}
	_AssetPrice        map[int]struct{}
	removed_AssetPrice map[int]struct{}
	cleared_AssetPrice bool
	done               bool
	oldValue           func(context.Context) (*Signer, error)
	predicates         []predicate.Signer
}

var _ ent.Mutation = (*SignerMutation)(nil)

// signerOption allows management of the mutation configuration using functional options.
type signerOption func(*SignerMutation)

// newSignerMutation creates new mutation for the Signer entity.
func newSignerMutation(c config, op Op, opts ...signerOption) *SignerMutation {
	m := &SignerMutation{
		config:        c,
		op:            op,
		typ:           TypeSigner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSignerID sets the ID field of the mutation.
func withSignerID(id int) signerOption {
	return func(m *SignerMutation) {
		var (
			err   error
			once  sync.Once
			value *Signer
		)
		m.oldValue = func(ctx context.Context) (*Signer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Signer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSigner sets the old Signer of the mutation.
func withSigner(node *Signer) signerOption {
	return func(m *SignerMutation) {
		m.oldValue = func(context.Context) (*Signer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SignerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SignerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SignerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SignerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Signer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SignerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SignerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Signer entity.
// If the Signer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SignerMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *SignerMutation) SetKey(b []byte) {
	m.key = &b
}

// Key returns the value of the "key" field in the mutation.
func (m *SignerMutation) Key() (r []byte, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Signer entity.
// If the Signer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignerMutation) OldKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *SignerMutation) ResetKey() {
	m.key = nil
}

// SetPoints sets the "points" field.
func (m *SignerMutation) SetPoints(i int64) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *SignerMutation) Points() (r int64, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the Signer entity.
// If the Signer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignerMutation) OldPoints(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *SignerMutation) AddPoints(i int64) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *SignerMutation) AddedPoints() (r int64, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *SignerMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// AddAssetPriceIDs adds the "AssetPrice" edge to the AssetPrice entity by ids.
func (m *SignerMutation) AddAssetPriceIDs(ids ...int) {
	if m._AssetPrice == nil {
		m._AssetPrice = make(map[int]struct{})
	}
	for i := range ids {
		m._AssetPrice[ids[i]] = struct{}{}
	}
}

// ClearAssetPrice clears the "AssetPrice" edge to the AssetPrice entity.
func (m *SignerMutation) ClearAssetPrice() {
	m.cleared_AssetPrice = true
}

// AssetPriceCleared reports if the "AssetPrice" edge to the AssetPrice entity was cleared.
func (m *SignerMutation) AssetPriceCleared() bool {
	return m.cleared_AssetPrice
}

// RemoveAssetPriceIDs removes the "AssetPrice" edge to the AssetPrice entity by IDs.
func (m *SignerMutation) RemoveAssetPriceIDs(ids ...int) {
	if m.removed_AssetPrice == nil {
		m.removed_AssetPrice = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._AssetPrice, ids[i])
		m.removed_AssetPrice[ids[i]] = struct{}{}
	}
}

// RemovedAssetPrice returns the removed IDs of the "AssetPrice" edge to the AssetPrice entity.
func (m *SignerMutation) RemovedAssetPriceIDs() (ids []int) {
	for id := range m.removed_AssetPrice {
		ids = append(ids, id)
	}
	return
}

// AssetPriceIDs returns the "AssetPrice" edge IDs in the mutation.
func (m *SignerMutation) AssetPriceIDs() (ids []int) {
	for id := range m._AssetPrice {
		ids = append(ids, id)
	}
	return
}

// ResetAssetPrice resets all changes to the "AssetPrice" edge.
func (m *SignerMutation) ResetAssetPrice() {
	m._AssetPrice = nil
	m.cleared_AssetPrice = false
	m.removed_AssetPrice = nil
}

// Where appends a list predicates to the SignerMutation builder.
func (m *SignerMutation) Where(ps ...predicate.Signer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SignerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SignerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Signer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SignerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SignerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Signer).
func (m *SignerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SignerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, signer.FieldName)
	}
	if m.key != nil {
		fields = append(fields, signer.FieldKey)
	}
	if m.points != nil {
		fields = append(fields, signer.FieldPoints)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SignerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case signer.FieldName:
		return m.Name()
	case signer.FieldKey:
		return m.Key()
	case signer.FieldPoints:
		return m.Points()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SignerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case signer.FieldName:
		return m.OldName(ctx)
	case signer.FieldKey:
		return m.OldKey(ctx)
	case signer.FieldPoints:
		return m.OldPoints(ctx)
	}
	return nil, fmt.Errorf("unknown Signer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case signer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case signer.FieldKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case signer.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	}
	return fmt.Errorf("unknown Signer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SignerMutation) AddedFields() []string {
	var fields []string
	if m.addpoints != nil {
		fields = append(fields, signer.FieldPoints)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SignerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case signer.FieldPoints:
		return m.AddedPoints()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case signer.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	}
	return fmt.Errorf("unknown Signer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SignerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SignerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SignerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Signer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SignerMutation) ResetField(name string) error {
	switch name {
	case signer.FieldName:
		m.ResetName()
		return nil
	case signer.FieldKey:
		m.ResetKey()
		return nil
	case signer.FieldPoints:
		m.ResetPoints()
		return nil
	}
	return fmt.Errorf("unknown Signer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SignerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._AssetPrice != nil {
		edges = append(edges, signer.EdgeAssetPrice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SignerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case signer.EdgeAssetPrice:
		ids := make([]ent.Value, 0, len(m._AssetPrice))
		for id := range m._AssetPrice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SignerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_AssetPrice != nil {
		edges = append(edges, signer.EdgeAssetPrice)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SignerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case signer.EdgeAssetPrice:
		ids := make([]ent.Value, 0, len(m.removed_AssetPrice))
		for id := range m.removed_AssetPrice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SignerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_AssetPrice {
		edges = append(edges, signer.EdgeAssetPrice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SignerMutation) EdgeCleared(name string) bool {
	switch name {
	case signer.EdgeAssetPrice:
		return m.cleared_AssetPrice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SignerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Signer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SignerMutation) ResetEdge(name string) error {
	switch name {
	case signer.EdgeAssetPrice:
		m.ResetAssetPrice()
		return nil
	}
	return fmt.Errorf("unknown Signer edge %s", name)
}
