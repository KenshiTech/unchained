// Code generated by ent, DO NOT EDIT.

package ent

import (
	"math/big"

	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/assetprice"
	"github.com/KenshiTech/unchained/ent/dataset"
	"github.com/KenshiTech/unchained/ent/schema"
	"github.com/KenshiTech/unchained/ent/signer"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	assetpriceFields := schema.AssetPrice{}.Fields()
	_ = assetpriceFields
	// assetpriceDescPrice is the schema descriptor for price field.
	assetpriceDescPrice := assetpriceFields[2].Descriptor()
	assetprice.ValueScanner.Price = assetpriceDescPrice.ValueScanner.(field.TypeValueScanner[*big.Int])
	datasetFields := schema.DataSet{}.Fields()
	_ = datasetFields
	// datasetDescName is the schema descriptor for name field.
	datasetDescName := datasetFields[0].Descriptor()
	// dataset.NameValidator is a validator for the "name" field. It is called by the builders before save.
	dataset.NameValidator = datasetDescName.Validators[0].(func(string) error)
	signerFields := schema.Signer{}.Fields()
	_ = signerFields
	// signerDescName is the schema descriptor for name field.
	signerDescName := signerFields[0].Descriptor()
	// signer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	signer.NameValidator = signerDescName.Validators[0].(func(string) error)
	// signerDescKey is the schema descriptor for key field.
	signerDescKey := signerFields[1].Descriptor()
	// signer.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	signer.KeyValidator = signerDescKey.Validators[0].(func([]byte) error)
}
