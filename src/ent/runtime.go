// Code generated by ent, DO NOT EDIT.

package ent

import (
	"math/big"

	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/assetprice"
	"github.com/KenshiTech/unchained/ent/eventlog"
	"github.com/KenshiTech/unchained/ent/schema"
	"github.com/KenshiTech/unchained/ent/signer"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	assetpriceFields := schema.AssetPrice{}.Fields()
	_ = assetpriceFields
	// assetpriceDescPrice is the schema descriptor for price field.
	assetpriceDescPrice := assetpriceFields[2].Descriptor()
	assetprice.ValueScanner.Price = assetpriceDescPrice.ValueScanner.(field.TypeValueScanner[*big.Int])
	// assetpriceDescSignature is the schema descriptor for signature field.
	assetpriceDescSignature := assetpriceFields[3].Descriptor()
	// assetprice.SignatureValidator is a validator for the "signature" field. It is called by the builders before save.
	assetprice.SignatureValidator = assetpriceDescSignature.Validators[0].(func([]byte) error)
	eventlogFields := schema.EventLog{}.Fields()
	_ = eventlogFields
	// eventlogDescSignature is the schema descriptor for signature field.
	eventlogDescSignature := eventlogFields[2].Descriptor()
	// eventlog.SignatureValidator is a validator for the "signature" field. It is called by the builders before save.
	eventlog.SignatureValidator = eventlogDescSignature.Validators[0].(func([]byte) error)
	// eventlogDescTransaction is the schema descriptor for transaction field.
	eventlogDescTransaction := eventlogFields[7].Descriptor()
	// eventlog.TransactionValidator is a validator for the "transaction" field. It is called by the builders before save.
	eventlog.TransactionValidator = eventlogDescTransaction.Validators[0].(func([]byte) error)
	signerFields := schema.Signer{}.Fields()
	_ = signerFields
	// signerDescName is the schema descriptor for name field.
	signerDescName := signerFields[0].Descriptor()
	// signer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	signer.NameValidator = signerDescName.Validators[0].(func(string) error)
	// signerDescKey is the schema descriptor for key field.
	signerDescKey := signerFields[1].Descriptor()
	// signer.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	signer.KeyValidator = func() func([]byte) error {
		validators := signerDescKey.Validators
		fns := [...]func([]byte) error{
			validators[0].(func([]byte) error),
			validators[1].(func([]byte) error),
		}
		return func(key []byte) error {
			for _, fn := range fns {
				if err := fn(key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// signerDescShortkey is the schema descriptor for shortkey field.
	signerDescShortkey := signerFields[2].Descriptor()
	// signer.ShortkeyValidator is a validator for the "shortkey" field. It is called by the builders before save.
	signer.ShortkeyValidator = func() func([]byte) error {
		validators := signerDescShortkey.Validators
		fns := [...]func([]byte) error{
			validators[0].(func([]byte) error),
			validators[1].(func([]byte) error),
		}
		return func(shortkey []byte) error {
			for _, fn := range fns {
				if err := fn(shortkey); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
