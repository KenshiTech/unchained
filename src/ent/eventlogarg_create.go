// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/eventlog"
	"github.com/KenshiTech/unchained/ent/eventlogarg"
)

// EventLogArgCreate is the builder for creating a EventLogArg entity.
type EventLogArgCreate struct {
	config
	mutation *EventLogArgMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (elac *EventLogArgCreate) SetName(s string) *EventLogArgCreate {
	elac.mutation.SetName(s)
	return elac
}

// SetType sets the "type" field.
func (elac *EventLogArgCreate) SetType(s string) *EventLogArgCreate {
	elac.mutation.SetType(s)
	return elac
}

// SetValue sets the "value" field.
func (elac *EventLogArgCreate) SetValue(s string) *EventLogArgCreate {
	elac.mutation.SetValue(s)
	return elac
}

// SetEventLogID sets the "eventLog" edge to the EventLog entity by ID.
func (elac *EventLogArgCreate) SetEventLogID(id int) *EventLogArgCreate {
	elac.mutation.SetEventLogID(id)
	return elac
}

// SetEventLog sets the "eventLog" edge to the EventLog entity.
func (elac *EventLogArgCreate) SetEventLog(e *EventLog) *EventLogArgCreate {
	return elac.SetEventLogID(e.ID)
}

// Mutation returns the EventLogArgMutation object of the builder.
func (elac *EventLogArgCreate) Mutation() *EventLogArgMutation {
	return elac.mutation
}

// Save creates the EventLogArg in the database.
func (elac *EventLogArgCreate) Save(ctx context.Context) (*EventLogArg, error) {
	return withHooks(ctx, elac.sqlSave, elac.mutation, elac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elac *EventLogArgCreate) SaveX(ctx context.Context) *EventLogArg {
	v, err := elac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elac *EventLogArgCreate) Exec(ctx context.Context) error {
	_, err := elac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elac *EventLogArgCreate) ExecX(ctx context.Context) {
	if err := elac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elac *EventLogArgCreate) check() error {
	if _, ok := elac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EventLogArg.name"`)}
	}
	if _, ok := elac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "EventLogArg.type"`)}
	}
	if _, ok := elac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "EventLogArg.value"`)}
	}
	if _, ok := elac.mutation.EventLogID(); !ok {
		return &ValidationError{Name: "eventLog", err: errors.New(`ent: missing required edge "EventLogArg.eventLog"`)}
	}
	return nil
}

func (elac *EventLogArgCreate) sqlSave(ctx context.Context) (*EventLogArg, error) {
	if err := elac.check(); err != nil {
		return nil, err
	}
	_node, _spec := elac.createSpec()
	if err := sqlgraph.CreateNode(ctx, elac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elac.mutation.id = &_node.ID
	elac.mutation.done = true
	return _node, nil
}

func (elac *EventLogArgCreate) createSpec() (*EventLogArg, *sqlgraph.CreateSpec) {
	var (
		_node = &EventLogArg{config: elac.config}
		_spec = sqlgraph.NewCreateSpec(eventlogarg.Table, sqlgraph.NewFieldSpec(eventlogarg.FieldID, field.TypeInt))
	)
	_spec.OnConflict = elac.conflict
	if value, ok := elac.mutation.Name(); ok {
		_spec.SetField(eventlogarg.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := elac.mutation.GetType(); ok {
		_spec.SetField(eventlogarg.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := elac.mutation.Value(); ok {
		_spec.SetField(eventlogarg.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := elac.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlogarg.EventLogTable,
			Columns: []string{eventlogarg.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_log_args = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventLogArg.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventLogArgUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (elac *EventLogArgCreate) OnConflict(opts ...sql.ConflictOption) *EventLogArgUpsertOne {
	elac.conflict = opts
	return &EventLogArgUpsertOne{
		create: elac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (elac *EventLogArgCreate) OnConflictColumns(columns ...string) *EventLogArgUpsertOne {
	elac.conflict = append(elac.conflict, sql.ConflictColumns(columns...))
	return &EventLogArgUpsertOne{
		create: elac,
	}
}

type (
	// EventLogArgUpsertOne is the builder for "upsert"-ing
	//  one EventLogArg node.
	EventLogArgUpsertOne struct {
		create *EventLogArgCreate
	}

	// EventLogArgUpsert is the "OnConflict" setter.
	EventLogArgUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EventLogArgUpsert) SetName(v string) *EventLogArgUpsert {
	u.Set(eventlogarg.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventLogArgUpsert) UpdateName() *EventLogArgUpsert {
	u.SetExcluded(eventlogarg.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *EventLogArgUpsert) SetType(v string) *EventLogArgUpsert {
	u.Set(eventlogarg.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventLogArgUpsert) UpdateType() *EventLogArgUpsert {
	u.SetExcluded(eventlogarg.FieldType)
	return u
}

// SetValue sets the "value" field.
func (u *EventLogArgUpsert) SetValue(v string) *EventLogArgUpsert {
	u.Set(eventlogarg.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EventLogArgUpsert) UpdateValue() *EventLogArgUpsert {
	u.SetExcluded(eventlogarg.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventLogArgUpsertOne) UpdateNewValues() *EventLogArgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventLogArgUpsertOne) Ignore() *EventLogArgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventLogArgUpsertOne) DoNothing() *EventLogArgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventLogArgCreate.OnConflict
// documentation for more info.
func (u *EventLogArgUpsertOne) Update(set func(*EventLogArgUpsert)) *EventLogArgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventLogArgUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventLogArgUpsertOne) SetName(v string) *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventLogArgUpsertOne) UpdateName() *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *EventLogArgUpsertOne) SetType(v string) *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventLogArgUpsertOne) UpdateType() *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *EventLogArgUpsertOne) SetValue(v string) *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EventLogArgUpsertOne) UpdateValue() *EventLogArgUpsertOne {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *EventLogArgUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventLogArgCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventLogArgUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventLogArgUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventLogArgUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventLogArgCreateBulk is the builder for creating many EventLogArg entities in bulk.
type EventLogArgCreateBulk struct {
	config
	err      error
	builders []*EventLogArgCreate
	conflict []sql.ConflictOption
}

// Save creates the EventLogArg entities in the database.
func (elacb *EventLogArgCreateBulk) Save(ctx context.Context) ([]*EventLogArg, error) {
	if elacb.err != nil {
		return nil, elacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elacb.builders))
	nodes := make([]*EventLogArg, len(elacb.builders))
	mutators := make([]Mutator, len(elacb.builders))
	for i := range elacb.builders {
		func(i int, root context.Context) {
			builder := elacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventLogArgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = elacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elacb *EventLogArgCreateBulk) SaveX(ctx context.Context) []*EventLogArg {
	v, err := elacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elacb *EventLogArgCreateBulk) Exec(ctx context.Context) error {
	_, err := elacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elacb *EventLogArgCreateBulk) ExecX(ctx context.Context) {
	if err := elacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventLogArg.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventLogArgUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (elacb *EventLogArgCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventLogArgUpsertBulk {
	elacb.conflict = opts
	return &EventLogArgUpsertBulk{
		create: elacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (elacb *EventLogArgCreateBulk) OnConflictColumns(columns ...string) *EventLogArgUpsertBulk {
	elacb.conflict = append(elacb.conflict, sql.ConflictColumns(columns...))
	return &EventLogArgUpsertBulk{
		create: elacb,
	}
}

// EventLogArgUpsertBulk is the builder for "upsert"-ing
// a bulk of EventLogArg nodes.
type EventLogArgUpsertBulk struct {
	create *EventLogArgCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventLogArgUpsertBulk) UpdateNewValues() *EventLogArgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventLogArg.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventLogArgUpsertBulk) Ignore() *EventLogArgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventLogArgUpsertBulk) DoNothing() *EventLogArgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventLogArgCreateBulk.OnConflict
// documentation for more info.
func (u *EventLogArgUpsertBulk) Update(set func(*EventLogArgUpsert)) *EventLogArgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventLogArgUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventLogArgUpsertBulk) SetName(v string) *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventLogArgUpsertBulk) UpdateName() *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *EventLogArgUpsertBulk) SetType(v string) *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventLogArgUpsertBulk) UpdateType() *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *EventLogArgUpsertBulk) SetValue(v string) *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EventLogArgUpsertBulk) UpdateValue() *EventLogArgUpsertBulk {
	return u.Update(func(s *EventLogArgUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *EventLogArgUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventLogArgCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventLogArgCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventLogArgUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
