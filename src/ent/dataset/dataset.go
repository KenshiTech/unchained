// Code generated by ent, DO NOT EDIT.

package dataset

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dataset type in the database.
	Label = "data_set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeAssetPrice holds the string denoting the assetprice edge name in mutations.
	EdgeAssetPrice = "AssetPrice"
	// Table holds the table name of the dataset in the database.
	Table = "data_sets"
	// AssetPriceTable is the table that holds the AssetPrice relation/edge. The primary key declared below.
	AssetPriceTable = "asset_price_DataSet"
	// AssetPriceInverseTable is the table name for the AssetPrice entity.
	// It exists in this package in order to avoid circular dependency with the "assetprice" package.
	AssetPriceInverseTable = "asset_prices"
)

// Columns holds all SQL columns for dataset fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// AssetPricePrimaryKey and AssetPriceColumn2 are the table columns denoting the
	// primary key for the AssetPrice relation (M2M).
	AssetPricePrimaryKey = []string{"asset_price_id", "data_set_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the DataSet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAssetPriceCount orders the results by AssetPrice count.
func ByAssetPriceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetPriceStep(), opts...)
	}
}

// ByAssetPrice orders the results by AssetPrice terms.
func ByAssetPrice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetPriceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAssetPriceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetPriceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AssetPriceTable, AssetPricePrimaryKey...),
	)
}
