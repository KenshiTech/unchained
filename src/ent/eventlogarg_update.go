// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/eventlog"
	"github.com/KenshiTech/unchained/ent/eventlogarg"
	"github.com/KenshiTech/unchained/ent/predicate"
)

// EventLogArgUpdate is the builder for updating EventLogArg entities.
type EventLogArgUpdate struct {
	config
	hooks    []Hook
	mutation *EventLogArgMutation
}

// Where appends a list predicates to the EventLogArgUpdate builder.
func (elau *EventLogArgUpdate) Where(ps ...predicate.EventLogArg) *EventLogArgUpdate {
	elau.mutation.Where(ps...)
	return elau
}

// SetName sets the "name" field.
func (elau *EventLogArgUpdate) SetName(s string) *EventLogArgUpdate {
	elau.mutation.SetName(s)
	return elau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (elau *EventLogArgUpdate) SetNillableName(s *string) *EventLogArgUpdate {
	if s != nil {
		elau.SetName(*s)
	}
	return elau
}

// SetType sets the "type" field.
func (elau *EventLogArgUpdate) SetType(s string) *EventLogArgUpdate {
	elau.mutation.SetType(s)
	return elau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (elau *EventLogArgUpdate) SetNillableType(s *string) *EventLogArgUpdate {
	if s != nil {
		elau.SetType(*s)
	}
	return elau
}

// SetValue sets the "value" field.
func (elau *EventLogArgUpdate) SetValue(s string) *EventLogArgUpdate {
	elau.mutation.SetValue(s)
	return elau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (elau *EventLogArgUpdate) SetNillableValue(s *string) *EventLogArgUpdate {
	if s != nil {
		elau.SetValue(*s)
	}
	return elau
}

// SetEventLogID sets the "eventLog" edge to the EventLog entity by ID.
func (elau *EventLogArgUpdate) SetEventLogID(id int) *EventLogArgUpdate {
	elau.mutation.SetEventLogID(id)
	return elau
}

// SetEventLog sets the "eventLog" edge to the EventLog entity.
func (elau *EventLogArgUpdate) SetEventLog(e *EventLog) *EventLogArgUpdate {
	return elau.SetEventLogID(e.ID)
}

// Mutation returns the EventLogArgMutation object of the builder.
func (elau *EventLogArgUpdate) Mutation() *EventLogArgMutation {
	return elau.mutation
}

// ClearEventLog clears the "eventLog" edge to the EventLog entity.
func (elau *EventLogArgUpdate) ClearEventLog() *EventLogArgUpdate {
	elau.mutation.ClearEventLog()
	return elau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elau *EventLogArgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elau.sqlSave, elau.mutation, elau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elau *EventLogArgUpdate) SaveX(ctx context.Context) int {
	affected, err := elau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elau *EventLogArgUpdate) Exec(ctx context.Context) error {
	_, err := elau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elau *EventLogArgUpdate) ExecX(ctx context.Context) {
	if err := elau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elau *EventLogArgUpdate) check() error {
	if _, ok := elau.mutation.EventLogID(); elau.mutation.EventLogCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventLogArg.eventLog"`)
	}
	return nil
}

func (elau *EventLogArgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := elau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlogarg.Table, eventlogarg.Columns, sqlgraph.NewFieldSpec(eventlogarg.FieldID, field.TypeInt))
	if ps := elau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elau.mutation.Name(); ok {
		_spec.SetField(eventlogarg.FieldName, field.TypeString, value)
	}
	if value, ok := elau.mutation.GetType(); ok {
		_spec.SetField(eventlogarg.FieldType, field.TypeString, value)
	}
	if value, ok := elau.mutation.Value(); ok {
		_spec.SetField(eventlogarg.FieldValue, field.TypeString, value)
	}
	if elau.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlogarg.EventLogTable,
			Columns: []string{eventlogarg.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elau.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlogarg.EventLogTable,
			Columns: []string{eventlogarg.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlogarg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elau.mutation.done = true
	return n, nil
}

// EventLogArgUpdateOne is the builder for updating a single EventLogArg entity.
type EventLogArgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventLogArgMutation
}

// SetName sets the "name" field.
func (elauo *EventLogArgUpdateOne) SetName(s string) *EventLogArgUpdateOne {
	elauo.mutation.SetName(s)
	return elauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (elauo *EventLogArgUpdateOne) SetNillableName(s *string) *EventLogArgUpdateOne {
	if s != nil {
		elauo.SetName(*s)
	}
	return elauo
}

// SetType sets the "type" field.
func (elauo *EventLogArgUpdateOne) SetType(s string) *EventLogArgUpdateOne {
	elauo.mutation.SetType(s)
	return elauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (elauo *EventLogArgUpdateOne) SetNillableType(s *string) *EventLogArgUpdateOne {
	if s != nil {
		elauo.SetType(*s)
	}
	return elauo
}

// SetValue sets the "value" field.
func (elauo *EventLogArgUpdateOne) SetValue(s string) *EventLogArgUpdateOne {
	elauo.mutation.SetValue(s)
	return elauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (elauo *EventLogArgUpdateOne) SetNillableValue(s *string) *EventLogArgUpdateOne {
	if s != nil {
		elauo.SetValue(*s)
	}
	return elauo
}

// SetEventLogID sets the "eventLog" edge to the EventLog entity by ID.
func (elauo *EventLogArgUpdateOne) SetEventLogID(id int) *EventLogArgUpdateOne {
	elauo.mutation.SetEventLogID(id)
	return elauo
}

// SetEventLog sets the "eventLog" edge to the EventLog entity.
func (elauo *EventLogArgUpdateOne) SetEventLog(e *EventLog) *EventLogArgUpdateOne {
	return elauo.SetEventLogID(e.ID)
}

// Mutation returns the EventLogArgMutation object of the builder.
func (elauo *EventLogArgUpdateOne) Mutation() *EventLogArgMutation {
	return elauo.mutation
}

// ClearEventLog clears the "eventLog" edge to the EventLog entity.
func (elauo *EventLogArgUpdateOne) ClearEventLog() *EventLogArgUpdateOne {
	elauo.mutation.ClearEventLog()
	return elauo
}

// Where appends a list predicates to the EventLogArgUpdate builder.
func (elauo *EventLogArgUpdateOne) Where(ps ...predicate.EventLogArg) *EventLogArgUpdateOne {
	elauo.mutation.Where(ps...)
	return elauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (elauo *EventLogArgUpdateOne) Select(field string, fields ...string) *EventLogArgUpdateOne {
	elauo.fields = append([]string{field}, fields...)
	return elauo
}

// Save executes the query and returns the updated EventLogArg entity.
func (elauo *EventLogArgUpdateOne) Save(ctx context.Context) (*EventLogArg, error) {
	return withHooks(ctx, elauo.sqlSave, elauo.mutation, elauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elauo *EventLogArgUpdateOne) SaveX(ctx context.Context) *EventLogArg {
	node, err := elauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (elauo *EventLogArgUpdateOne) Exec(ctx context.Context) error {
	_, err := elauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elauo *EventLogArgUpdateOne) ExecX(ctx context.Context) {
	if err := elauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elauo *EventLogArgUpdateOne) check() error {
	if _, ok := elauo.mutation.EventLogID(); elauo.mutation.EventLogCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventLogArg.eventLog"`)
	}
	return nil
}

func (elauo *EventLogArgUpdateOne) sqlSave(ctx context.Context) (_node *EventLogArg, err error) {
	if err := elauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlogarg.Table, eventlogarg.Columns, sqlgraph.NewFieldSpec(eventlogarg.FieldID, field.TypeInt))
	id, ok := elauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventLogArg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := elauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlogarg.FieldID)
		for _, f := range fields {
			if !eventlogarg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventlogarg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := elauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elauo.mutation.Name(); ok {
		_spec.SetField(eventlogarg.FieldName, field.TypeString, value)
	}
	if value, ok := elauo.mutation.GetType(); ok {
		_spec.SetField(eventlogarg.FieldType, field.TypeString, value)
	}
	if value, ok := elauo.mutation.Value(); ok {
		_spec.SetField(eventlogarg.FieldValue, field.TypeString, value)
	}
	if elauo.mutation.EventLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlogarg.EventLogTable,
			Columns: []string{eventlogarg.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elauo.mutation.EventLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlogarg.EventLogTable,
			Columns: []string{eventlogarg.EventLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventLogArg{config: elauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, elauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlogarg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	elauo.mutation.done = true
	return _node, nil
}
