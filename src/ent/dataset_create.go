// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/ent/assetprice"
	"github.com/KenshiTech/unchained/ent/dataset"
)

// DataSetCreate is the builder for creating a DataSet entity.
type DataSetCreate struct {
	config
	mutation *DataSetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dsc *DataSetCreate) SetName(s string) *DataSetCreate {
	dsc.mutation.SetName(s)
	return dsc
}

// AddAssetPriceIDs adds the "AssetPrice" edge to the AssetPrice entity by IDs.
func (dsc *DataSetCreate) AddAssetPriceIDs(ids ...int) *DataSetCreate {
	dsc.mutation.AddAssetPriceIDs(ids...)
	return dsc
}

// AddAssetPrice adds the "AssetPrice" edges to the AssetPrice entity.
func (dsc *DataSetCreate) AddAssetPrice(a ...*AssetPrice) *DataSetCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dsc.AddAssetPriceIDs(ids...)
}

// Mutation returns the DataSetMutation object of the builder.
func (dsc *DataSetCreate) Mutation() *DataSetMutation {
	return dsc.mutation
}

// Save creates the DataSet in the database.
func (dsc *DataSetCreate) Save(ctx context.Context) (*DataSet, error) {
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DataSetCreate) SaveX(ctx context.Context) *DataSet {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DataSetCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DataSetCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DataSetCreate) check() error {
	if _, ok := dsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DataSet.name"`)}
	}
	if v, ok := dsc.mutation.Name(); ok {
		if err := dataset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DataSet.name": %w`, err)}
		}
	}
	return nil
}

func (dsc *DataSetCreate) sqlSave(ctx context.Context) (*DataSet, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DataSetCreate) createSpec() (*DataSet, *sqlgraph.CreateSpec) {
	var (
		_node = &DataSet{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(dataset.Table, sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dsc.conflict
	if value, ok := dsc.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := dsc.mutation.AssetPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dataset.AssetPriceTable,
			Columns: dataset.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DataSet.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DataSetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dsc *DataSetCreate) OnConflict(opts ...sql.ConflictOption) *DataSetUpsertOne {
	dsc.conflict = opts
	return &DataSetUpsertOne{
		create: dsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DataSet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dsc *DataSetCreate) OnConflictColumns(columns ...string) *DataSetUpsertOne {
	dsc.conflict = append(dsc.conflict, sql.ConflictColumns(columns...))
	return &DataSetUpsertOne{
		create: dsc,
	}
}

type (
	// DataSetUpsertOne is the builder for "upsert"-ing
	//  one DataSet node.
	DataSetUpsertOne struct {
		create *DataSetCreate
	}

	// DataSetUpsert is the "OnConflict" setter.
	DataSetUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DataSetUpsert) SetName(v string) *DataSetUpsert {
	u.Set(dataset.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataSetUpsert) UpdateName() *DataSetUpsert {
	u.SetExcluded(dataset.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DataSet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DataSetUpsertOne) UpdateNewValues() *DataSetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DataSet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DataSetUpsertOne) Ignore() *DataSetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DataSetUpsertOne) DoNothing() *DataSetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DataSetCreate.OnConflict
// documentation for more info.
func (u *DataSetUpsertOne) Update(set func(*DataSetUpsert)) *DataSetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DataSetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DataSetUpsertOne) SetName(v string) *DataSetUpsertOne {
	return u.Update(func(s *DataSetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataSetUpsertOne) UpdateName() *DataSetUpsertOne {
	return u.Update(func(s *DataSetUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *DataSetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DataSetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DataSetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DataSetUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DataSetUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DataSetCreateBulk is the builder for creating many DataSet entities in bulk.
type DataSetCreateBulk struct {
	config
	err      error
	builders []*DataSetCreate
	conflict []sql.ConflictOption
}

// Save creates the DataSet entities in the database.
func (dscb *DataSetCreateBulk) Save(ctx context.Context) ([]*DataSet, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DataSet, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DataSetCreateBulk) SaveX(ctx context.Context) []*DataSet {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DataSetCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DataSetCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DataSet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DataSetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dscb *DataSetCreateBulk) OnConflict(opts ...sql.ConflictOption) *DataSetUpsertBulk {
	dscb.conflict = opts
	return &DataSetUpsertBulk{
		create: dscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DataSet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dscb *DataSetCreateBulk) OnConflictColumns(columns ...string) *DataSetUpsertBulk {
	dscb.conflict = append(dscb.conflict, sql.ConflictColumns(columns...))
	return &DataSetUpsertBulk{
		create: dscb,
	}
}

// DataSetUpsertBulk is the builder for "upsert"-ing
// a bulk of DataSet nodes.
type DataSetUpsertBulk struct {
	create *DataSetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DataSet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DataSetUpsertBulk) UpdateNewValues() *DataSetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DataSet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DataSetUpsertBulk) Ignore() *DataSetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DataSetUpsertBulk) DoNothing() *DataSetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DataSetCreateBulk.OnConflict
// documentation for more info.
func (u *DataSetUpsertBulk) Update(set func(*DataSetUpsert)) *DataSetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DataSetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DataSetUpsertBulk) SetName(v string) *DataSetUpsertBulk {
	return u.Update(func(s *DataSetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataSetUpsertBulk) UpdateName() *DataSetUpsertBulk {
	return u.Update(func(s *DataSetUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *DataSetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DataSetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DataSetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DataSetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
